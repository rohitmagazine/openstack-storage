envs:
  global:
    variables:
      oneops.organization: $ORGANIZATION
      oneops.assembly: $ASSEMBLY
      oneops.platform: $PLATFORM
      oneops.component: $COMPONENT
  dev:
    variables:
      oneops.environment: dev
  qa:
    variables:
      oneops.environment: qa
  prod:
    variables:
      oneops.environment: prod
tools:
  nodejs:
    - 8.11.1
  npm:
    - 5.8.0
  sonarscanner:
    - 3.0.3.778
triggers:
  - manual:
      name: Prod Bump-Deploy
      call: prodBump
  - manual:
      name: Prod Deploy
      call: prod
  - manual:
      name: QA Bump-Deploy
      call: qaBump
  - manual:
      name: QA Deploy
      call: qa
  - manual:
      name: Dev Deploy
      call: default
flows:
  default:
    - "echo 'node version: '; node --version; echo 'npm version: '; npm --version"
    - call: dev-npm-build-publish(dev)
  pr:
    - "npm install"
    - call: default-test
  dev-npm-build-publish:
    - "npm install"
    - call: default-test
    - exposeVars(package.json)
    - |
      (name dev npm publish)
      #!/bin/bash
      git reset --hard
      npm version ${package.version}-build.${BUILD_NUMBER}.$(date +%Y%m%d%H%M%S)
      npm publish
    - call: oneops-deploy
  oneops-deploy:
    - exposeVars(package.json)
    - oneops.transitionVariableUpdate(variables = { appVersion = ${package.version}})
    - oneops.environmentCommitAndDeploy(deployAllPlatforms = false)
  default-test:
    - "npm test"
  npm-bump-publish:
    - "npm install"
    - call: default-test
#    - sonar("Sonar"):
#      - (name sonar) sonar-scanner
#      - hygieia.publishSonar()
#    - hygieia.publishBuild()
    - "rm view.json || true && npm view @walmart/shelf-api --json >> view.json"
    - exposeVars(package.json):
        vars:
          code: '.version'
    - exposeVars(view.json):
        vars:
          tags: '.dist-tags'
    - 'echo "Stable Version is: ${tags.stable}, Latest Version is: ${tags.latest}, Code Version is ${code}"'
    - "rm view.json && git reset --hard"
    - |
      (name npm-bump-publish)
      #!/bin/bash
      STABLE=${tags.stable}
      VERSION=${code}
      branch=$(git rev-parse --abbrev-ref HEAD)
      major=$(echo "$VERSION" | awk -F '.' '{print $1}')
      minor=$(echo "$VERSION" | awk -F '.' '{print $2}')
      patch=$(echo "$VERSION" | awk -F '.' '{print $3}')
      ((patch++))
      PATCHED="$major.$minor.$patch"
      echo "If we patch, the new version will be $PATCHED"
      function version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
      if [ "$STABLE" == "$VERSION" ]
      then
        echo "@walmart/shelf-api@${VERSION} already deployed"
        echo env
        exit 1
      elif version_gt $VERSION $STABLE || [ "$latest" == "" ]
      then
        echo "deploying @walmart/shelf-api@${VERSION}"
        npm publish --tag stable
        git tag "$VERSION"
        git push origin "$VERSION"
        npm version patch
        git push origin "$branch"
        git reset HEAD~1 --hard
      else
        echo "Oops, npm $STABLE is ahead of master $VERSION"
        echo env
        exit 1
      fi
  npm-stable-check:
    - "npm install"
    - call: default-test
    - exposeVars(package.json)
    - "rm view.json || true && npm view ${package.name} --json >> view.json"
    - exposeVars(view.json):
        vars:
          tags: '.dist-tags'
    - 'echo "Stable Version is: ${tags.stable}, Latest Version is: ${tags.latest}"'
    - "rm view.json && git reset --hard"
    - exposeVars(package.json)
    - 'echo "Building Version is: ${package.version}"'
    - |
      STABLE=${tags.stable}
      if ["$STABLE" = ""] then
        echo "No stable version, aborting deploy"
        echo env
        exit 1
      fi
      npm version "$STABLE" --no-git-tag-version --allow-same-version
  prodBump:
    - call: npm-bump-publish
    - call: oneops-deploy(prod)
    - |
      (name version patch)
      #!/bin/bash
      branch=$(git rev-parse --abbrev-ref HEAD)
      git pull origin "$branch"
      npm version patch
      git push origin "$branch"
  prod:
    - call: npm-stable-check
    - call: oneops-deploy(prod)
  qaBump:
    - call: npm-bump-publish
    - call: oneops-deploy(qa)
  qa:
    - call: npm-stable-check
    - call: oneops-deploy(qa)
